name: 🚀 Deploy (Production) — novu_lis_buguey

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DEPLOY_BASE: /var/www/html/buguey

jobs:
  build:
    name: Build & Package
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🧩 Set up PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer
          extensions: mbstring, intl, pdo_mysql, bcmath, gd, xml, curl, fileinfo
          coverage: none

      - name: 🧰 Install PHP (prod) deps
        run: |
          composer install --no-dev --prefer-dist --no-interaction --no-progress
          php -v
          composer --version

      - name: 🧱 Set up Node (for CI build only)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install Node deps & build (if package.json exists)
        run: |
          if [ -f package.json ]; then
            npm ci --no-audit --no-fund
            npm run build
          else
            echo "No package.json found; skipping Vite build."
          fi

      - name: 🧹 Prune dev files from artifact
        run: |
          rm -rf .git .github .env node_modules tests docker docker-compose* \
                 storage/logs/* storage/framework/sessions/* storage/framework/views/* \
                 storage/framework/cache/*

      - name: 📦 Create artifact (with vendor + built assets)
        run: |
          tar -czf release.tar.gz \
            --exclude="*.log" \
            --exclude="storage/app/public/*" \
            .

      - name: ⬆️ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: release.tar.gz
          if-no-files-found: error

  deploy:
    name: Deploy to Production (Zero Downtime)
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: ${{ steps.publish_url.outputs.url || '' }}

    steps:
      - name: ⬇️ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: .

      - name: 📤 Copy artifact to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "release.tar.gz"
          target: "${{ env.DEPLOY_BASE }}/tmp"

      - name: 🔑 Deploy over SSH (create dirs, unpack, link, migrate)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail

            BASE="${{ env.DEPLOY_BASE }}"
            RELEASES="$BASE/releases"
            SHARED="$BASE/shared"
            TMP="$BASE/tmp"
            TS=$(date +"%Y%m%d%H%M%S")
            NEW_RELEASE="$RELEASES/$TS"

            echo "→ Ensure base folders exist"
            sudo mkdir -p "$RELEASES" "$SHARED/storage" "$TMP"
            sudo chown -R www-data:www-data "$BASE"
            sudo chmod -R 775 "$BASE"

            echo "→ First run: move any existing .env to shared"
            if [ -f "$BASE/.env" ] && [ ! -f "$SHARED/.env" ]; then
              sudo mv "$BASE/.env" "$SHARED/.env"
              sudo chown www-data:www-data "$SHARED/.env"
              sudo chmod 640 "$SHARED/.env"
            fi

            echo "→ Create new release dir and unpack"
            sudo -u www-data mkdir -p "$NEW_RELEASE"
            sudo tar -xzf "$TMP/release.tar.gz" -C "$NEW_RELEASE"
            sudo rm -f "$TMP/release.tar.gz"

            echo "→ Link shared resources"
            if [ -f "$SHARED/.env" ]; then
              sudo ln -s "$SHARED/.env" "$NEW_RELEASE/.env"
            else
              # If no .env yet, bootstrap from example once
              if [ -f "$NEW_RELEASE/.env.example" ]; then
                sudo cp "$NEW_RELEASE/.env.example" "$SHARED/.env"
                sudo chown www-data:www-data "$SHARED/.env"
                sudo chmod 640 "$SHARED/.env"
                sudo ln -s "$SHARED/.env" "$NEW_RELEASE/.env"
              fi
            fi

            # Share storage directory across releases
            if [ -d "$NEW_RELEASE/storage" ]; then
              sudo rm -rf "$NEW_RELEASE/storage"
            fi
            sudo ln -s "$SHARED/storage" "$NEW_RELEASE/storage"

            echo "→ Detect PHP binary"
            if command -v php >/dev/null 2>&1; then
              PHP_BIN="$(command -v php)"
            elif command -v php8.3 >/dev/null 2>&1; then
              PHP_BIN="$(command -v php8.3)"
            else
              echo "❌ PHP not found"; exit 1
            fi

            echo "→ Laravel tasks (migrate, optimize, storage link)"
            cd "$NEW_RELEASE"

            # Ensure storage subfolders exist & are writable
            sudo -u www-data mkdir -p \
              storage/framework/{cache,sessions,views} \
              storage/logs storage/app/public

            sudo -u www-data $PHP_BIN artisan key:generate --force || true
            sudo -u www-data $PHP_BIN artisan storage:link || true
            sudo -u www-data $PHP_BIN artisan migrate --force
            sudo -u www-data $PHP_BIN artisan optimize:clear
            sudo -u www-data $PHP_BIN artisan optimize

            echo "→ Permissions"
            sudo chown -R www-data:www-data "$SHARED" "$NEW_RELEASE"
            sudo find "$SHARED/storage" -type d -exec chmod 775 {} \; || true
            sudo find "$SHARED/storage" -type f -exec chmod 664 {} \; || true
            sudo chmod -R 775 "$NEW_RELEASE/bootstrap/cache" || true

            echo "→ Update symlink atomically"
            if [ -L "$BASE/current" ]; then
              sudo ln -sfn "$NEW_RELEASE" "$BASE/current"
            else
              sudo ln -s "$NEW_RELEASE" "$BASE/current"
            fi

            echo "→ (Optional) Reload PHP-FPM / Queue workers"
            if systemctl is-active --quiet php8.3-fpm; then
              sudo systemctl reload php8.3-fpm || true
            elif systemctl is-active --quiet php-fpm; then
              sudo systemctl reload php-fpm || true
            fi

            echo "✅ Deploy complete: $NEW_RELEASE"

      - name: 🔗 Publish URL (optional)
        id: publish_url
        run: echo "url=${{ secrets.PUBLIC_URL || '' }}" >> $GITHUB_OUTPUT
